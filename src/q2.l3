(define empty? (lambda (x) (eq? x '())))


(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
        lst2
        (cons (car lst1) (append (cdr lst1) lst2))
      )
  )
)

(define reverse
  (lambda (lst)
      (if (empty? lst)
        '()
        (append (reverse (cdr lst)) (cons (car lst) '()))) 
      )
)

(define duplicate-val
   (lambda(lst dup-count val)
        (if (= dup-count 0)
        lst
        (duplicate-val(append lst (list val))(- dup-count 1) val)
      )
   )
)

(define duplicate-items-helper
   (lambda(og-lst new-lst og-dup curr-dup)
      (if (empty? og-lst)
        new-lst
        (if (empty? curr-dup)
            (duplicate-items-helper (cdr og-lst) (duplicate-val new-lst (car og-dup) (car og-lst)) og-dup (cdr og-dup))
            (duplicate-items-helper (cdr og-lst) (duplicate-val new-lst (car curr-dup) (car og-lst)) og-dup (cdr curr-dup))
        )
      )
   )
)

(define duplicate-items
   (lambda(lst dup-count)
     (duplicate-items-helper lst '() dup-count dup-count)
   )
)


(define remove-dup-rec
  (lambda (lst new-lst val)
      (if (empty? lst)
         new-lst
         (if (eq? (car lst) val)
            (remove-dup-rec (cdr lst) new-lst val)
            (remove-dup-rec (cdr lst) (append new-lst (list (car lst))) val)
         )
      )
  )
)

(define remove-dup
  (lambda (lst val)
    (remove-dup-rec lst '() val)
  )
)

(define payment
  (lambda (n coins-lst)
      (if(= n 0)
        1
        (if (or (empty? coins-lst) (< n 0))
           0
           (if (empty? (cdr coins-lst))            
           (+ (payment (- n (car coins-lst)) (cdr coins-lst)) (payment n (cdr coins-lst)))
           (+ (payment (- n (car coins-lst)) (cdr coins-lst)) (payment n  (remove-dup coins-lst (car coins-lst))))
           ))
        )
      )
)

                               
(define compose-n
  (lambda( f n)
        @TODO
  )
)
