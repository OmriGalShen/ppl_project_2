(define empty? (lambda (x) (eq? x '())))


(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
        lst2
        (cons (car lst1) (append (cdr lst1) lst2))
      )
  )
)

(define reverse
  (lambda (lst)
      (if (empty? lst)
        '()
        (append (reverse (cdr lst)) (cons (car lst) '()))) 
      )
)

(define duplicate-val
  (lambda(lst val dup-num)
    (if(= dup-num 0)
      lst
      (append duplicate-val (cons val '()))
    )  
  )
)

(define duplicate-items
   (lambda(lst dup-count)
      (if (empty? dup-count)



      )
   )
)


(define payment
  (lambda (n coins-lst)
        @TODO
  )
)
                               
(define compose-n
  (lambda( f n)
        @TODO
  )
)
